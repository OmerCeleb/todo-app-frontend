// src/components/Settings/Settings.tsx - Type Errors Fixed
import React, { useState, useEffect } from 'react';
import { Save, Download, Upload, Trash2, FileText, File, FileDown } from 'lucide-react';
import { Button } from '../ui/Button';
import { Modal } from '../ui/Modal';
import type { TodoFormData, Todo } from '../TodoForm';

interface SettingsProps {
    isOpen: boolean;
    onClose: () => void;
    darkMode?: boolean;
    onImportTodos?: (todos: TodoFormData[]) => void;
    onSettingsChange?: (settings: AppSettings) => void;
}

export interface AppSettings {
    defaultPriority: 'low' | 'medium' | 'high';
    autoMarkOverdue: boolean;
    notifications: boolean;
    soundEffects: boolean;
    compactView: boolean;
    showCompletedTasks: boolean;
    autoSave: boolean;
    theme: 'light' | 'dark' | 'system';
}

const defaultSettings: AppSettings = {
    defaultPriority: 'medium',
    autoMarkOverdue: true,
    notifications: true,
    soundEffects: false,
    compactView: false,
    showCompletedTasks: true,
    autoSave: true,
    theme: 'system',
};

export function Settings({ isOpen, onClose, onImportTodos, onSettingsChange }: SettingsProps) {
    const [settings, setSettings] = useState<AppSettings>(defaultSettings);
    const [hasChanges, setHasChanges] = useState(false);
    const [importing, setImporting] = useState(false);
    const [exporting, setExporting] = useState(false);
    const [importStatus, setImportStatus] = useState<string>('');

    // Load settings from localStorage on mount
    useEffect(() => {
        if (isOpen) {
            const savedSettings = localStorage.getItem('app-settings');
            if (savedSettings) {
                try {
                    const parsed = JSON.parse(savedSettings);
                    setSettings({ ...defaultSettings, ...parsed });
                } catch (error) {
                    console.error('Failed to parse settings:', error);
                    setSettings(defaultSettings);
                }
            }
            setHasChanges(false);
        }
    }, [isOpen]);

    // Handle settings change
    const handleSettingChange = (key: keyof AppSettings, value: any) => {
        const newSettings = { ...settings, [key]: value };
        setSettings(newSettings);
        setHasChanges(true);

        // Apply settings immediately if auto-save is enabled
        if (settings.autoSave) {
            localStorage.setItem('app-settings', JSON.stringify(newSettings));
            onSettingsChange?.(newSettings);
        }
    };

    // Save settings
    const handleSaveSettings = () => {
        try {
            localStorage.setItem('app-settings', JSON.stringify(settings));
            setHasChanges(false);

            // Notify parent component about settings change
            onSettingsChange?.(settings);

            // Show success message
            const event = new CustomEvent('settings-saved', { detail: settings });
            window.dispatchEvent(event);

            // Auto-close after save
            setTimeout(() => {
                onClose();
            }, 1000);
        } catch (error) {
            console.error('Failed to save settings:', error);
            setImportStatus('Failed to save settings');
        }
    };

    // Generate PDF Export
    const generatePDFExport = (todos: Todo[], settings: AppSettings) => {
        const date = new Date().toLocaleDateString();
        const stats = {
            total: todos.length,
            completed: todos.filter((t: Todo) => t.completed).length,
            active: todos.filter((t: Todo) => !t.completed).length,
            overdue: todos.filter((t: Todo) => t.dueDate && new Date(t.dueDate) < new Date() && !t.completed).length
        };

        const pdfContent = `
TODO APP EXPORT REPORT
Generated: ${date}

STATISTICS:
- Total Todos: ${stats.total}
- Completed: ${stats.completed}
- Active: ${stats.active}
- Overdue: ${stats.overdue}

TODOS LIST:
${todos.map((todo, index) => `
${index + 1}. ${todo.title}
   Status: ${todo.completed ? '✅ Completed' : '⏳ Active'}
   Priority: ${todo.priority.toUpperCase()}
   Category: ${todo.category || 'None'}
   Due Date: ${todo.dueDate ? new Date(todo.dueDate).toLocaleDateString() : 'None'}
   Description: ${todo.description || 'No description'}
   Created: ${new Date(todo.createdAt).toLocaleDateString()}
   ---
`).join('')}

SETTINGS:
- Default Priority: ${settings.defaultPriority}
- Theme: ${settings.theme}
- Compact View: ${settings.compactView ? 'Enabled' : 'Disabled'}
- Notifications: ${settings.notifications ? 'Enabled' : 'Disabled'}
- Auto-save: ${settings.autoSave ? 'Enabled' : 'Disabled'}
- Show Completed: ${settings.showCompletedTasks ? 'Enabled' : 'Disabled'}

---
Export generated by Modern Todo App
`;

        return pdfContent;
    };

    // Export data in multiple formats
    const handleExportData = async (format: 'json' | 'pdf' | 'txt') => {
        setExporting(true);
        try {
            const todosJson = localStorage.getItem('todos') || '[]';
            const todos: Todo[] = JSON.parse(todosJson);
            const timestamp = new Date().toISOString().split('T')[0];

            if (format === 'json') {
                const exportData = {
                    todos,
                    settings,
                    exportDate: new Date().toISOString(),
                    version: '1.0.0',
                    stats: {
                        total: todos.length,
                        completed: todos.filter((t: Todo) => t.completed).length,
                        active: todos.filter((t: Todo) => !t.completed).length,
                    }
                };

                const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `todo-app-backup-${timestamp}.json`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

            } else if (format === 'pdf' || format === 'txt') {
                const content = generatePDFExport(todos, settings);
                const blob = new Blob([content], { type: 'text/plain' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `todo-app-report-${timestamp}.${format === 'pdf' ? 'txt' : 'txt'}`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);
            }

            setImportStatus(`${format.toUpperCase()} export completed successfully!`);
            setTimeout(() => setImportStatus(''), 3000);

        } catch (error) {
            console.error('Export failed:', error);
            setImportStatus('Export failed!');
        } finally {
            setExporting(false);
        }
    };

    // Parse text and extract todos
    const extractTodosFromText = (text: string): TodoFormData[] => {
        const todos: TodoFormData[] = [];
        const lines = text.split('\n').filter(line => line.trim());

        for (const line of lines) {
            const trimmed = line.trim();

            // Skip empty lines and headers
            if (!trimmed || trimmed.length < 3) continue;

            // Clean up common list markers
            let title = trimmed
                .replace(/^[-*•]\s*/, '') // Remove bullet points
                .replace(/^\d+\.\s*/, '') // Remove numbered lists
                .replace(/^[✓✗☐☑]\s*/, '') // Remove checkboxes
                .replace(/^TODO:?\s*/i, '') // Remove TODO: prefix
                .replace(/^TASK:?\s*/i, '') // Remove TASK: prefix
                .trim();

            if (title.length < 2) continue;

            // Extract priority from keywords
            let priority: 'low' | 'medium' | 'high' = settings.defaultPriority; // Use default from settings
            if (/urgent|high|important|critical|asap/i.test(title)) {
                priority = 'high';
                title = title.replace(/\s*\(urgent\)|\s*\(high\)|\s*\(important\)|\s*\(critical\)|\s*\(asap\)/gi, '');
            } else if (/low|minor|optional/i.test(title)) {
                priority = 'low';
                title = title.replace(/\s*\(low\)|\s*\(minor\)|\s*\(optional\)/gi, '');
            }

            // Extract category from brackets or tags
            let category = '';
            const categoryMatch = title.match(/\[([^\]]+)\]|\#(\w+)/);
            if (categoryMatch) {
                category = categoryMatch[1] || categoryMatch[2];
                title = title.replace(/\s*\[[^\]]+\]|\s*\#\w+/g, '');
            }

            // Extract due date
            let dueDate = '';
            const dateMatch = title.match(/due:?\s*(\d{4}-\d{2}-\d{2}|\d{2}\/\d{2}\/\d{4})/i);
            if (dateMatch) {
                dueDate = dateMatch[1];
                title = title.replace(/due:?\s*(\d{4}-\d{2}-\d{2}|\d{2}\/\d{2}\/\d{4})/gi, '');
            }

            // Clean up title
            title = title.trim().replace(/\s+/g, ' ');

            if (title.length >= 2) {
                todos.push({
                    title,
                    description: '',
                    priority,
                    category: category || '',
                    dueDate: dueDate || ''
                });
            }
        }

        return todos;
    };

    // Import data from file
    const handleImportData = async (event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (!file) return;

        setImporting(true);
        setImportStatus('Processing file...');

        try {
            if (file.type === 'application/json') {
                // Handle JSON files
                const text = await file.text();
                const data = JSON.parse(text);

                let todos: TodoFormData[] = [];

                if (Array.isArray(data)) {
                    // Direct array of todos
                    todos = data;
                } else if (data.todos && Array.isArray(data.todos)) {
                    // Backup file format
                    todos = data.todos;
                    // Also restore settings if available
                    if (data.settings) {
                        const newSettings = { ...defaultSettings, ...data.settings };
                        setSettings(newSettings);
                        setHasChanges(true);
                        localStorage.setItem('app-settings', JSON.stringify(newSettings));
                        onSettingsChange?.(newSettings);
                    }
                } else {
                    throw new Error('Invalid JSON format');
                }

                if (onImportTodos && todos.length > 0) {
                    onImportTodos(todos);
                    setImportStatus(`Successfully imported ${todos.length} todos from JSON!`);
                } else {
                    setImportStatus('No valid todos found in JSON file');
                }

            } else if (file.type === 'text/plain' || file.name.endsWith('.txt')) {
                // Handle text files
                const text = await file.text();
                const extractedTodos = extractTodosFromText(text);

                if (onImportTodos && extractedTodos.length > 0) {
                    onImportTodos(extractedTodos);
                    setImportStatus(`Successfully extracted ${extractedTodos.length} todos from text!`);
                } else {
                    setImportStatus('No todos found in text file');
                }

            } else {
                // Try to read as text for other formats
                const text = await file.text();
                const extractedTodos = extractTodosFromText(text);

                if (extractedTodos.length > 0) {
                    if (onImportTodos) {
                        onImportTodos(extractedTodos);
                        setImportStatus(`Successfully extracted ${extractedTodos.length} todos!`);
                    }
                } else {
                    setImportStatus('Unsupported file format or no todos found');
                }
            }
        } catch (error) {
            console.error('Import error:', error);
            setImportStatus('Failed to import file. Please check the format.');
        } finally {
            setImporting(false);
            // Reset file input
            event.target.value = '';

            // Clear status after 5 seconds
            setTimeout(() => setImportStatus(''), 5000);
        }
    };

    // Clear all data
    const handleClearAllData = () => {
        if (window.confirm('Are you sure you want to delete all data? This cannot be undone.')) {
            localStorage.removeItem('todos');
            localStorage.removeItem('app-settings');
            setSettings(defaultSettings);
            setHasChanges(false);
            onSettingsChange?.(defaultSettings);
            setImportStatus('All data cleared successfully!');
            setTimeout(() => setImportStatus(''), 3000);
        }
    };

    // Reset settings to default
    const handleResetSettings = () => {
        if (window.confirm('Reset all settings to default values?')) {
            setSettings(defaultSettings);
            setHasChanges(true);
        }
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Settings" size="xl">
            <div className="max-h-[80vh] overflow-y-auto">
                <div className="space-y-6 p-1">
                    {/* Import Status */}
                    {importStatus && (
                        <div className={`p-3 rounded-lg text-sm ${
                            importStatus.includes('Success') || importStatus.includes('successfully')
                                ? 'bg-green-100 text-green-800 border border-green-200 dark:bg-green-900/20 dark:text-green-400 dark:border-green-800'
                                : importStatus.includes('Failed') || importStatus.includes('error')
                                    ? 'bg-red-100 text-red-800 border border-red-200 dark:bg-red-900/20 dark:text-red-400 dark:border-red-800'
                                    : 'bg-blue-100 text-blue-800 border border-blue-200 dark:bg-blue-900/20 dark:text-blue-400 dark:border-blue-800'
                        }`}>
                            {importStatus}
                        </div>
                    )}

                    {/* General Settings */}
                    <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">General Settings</h3>
                        <div className="space-y-4">
                            {/* Priority and Theme Row */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                                <div>
                                    <label className="block text-sm font-medium mb-2 text-gray-700 dark:text-gray-300">
                                        Default Priority
                                    </label>
                                    <select
                                        value={settings.defaultPriority}
                                        onChange={(e) => handleSettingChange('defaultPriority', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                    >
                                        <option value="low">Low Priority</option>
                                        <option value="medium">Medium Priority</option>
                                        <option value="high">High Priority</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2 text-gray-700 dark:text-gray-300">
                                        Theme
                                    </label>
                                    <select
                                        value={settings.theme}
                                        onChange={(e) => handleSettingChange('theme', e.target.value)}
                                        className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white text-sm"
                                    >
                                        <option value="light">Light</option>
                                        <option value="dark">Dark</option>
                                        <option value="system">System</option>
                                    </select>
                                </div>
                            </div>

                            {/* Settings Checkboxes - Responsive Grid */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-3">
                                {[
                                    { key: 'autoMarkOverdue', label: 'Auto-mark overdue', description: 'Automatically mark tasks as overdue' },
                                    { key: 'notifications', label: 'Notifications', description: 'Show notification messages' },
                                    { key: 'soundEffects', label: 'Sound effects', description: 'Play sounds for actions' },
                                    { key: 'compactView', label: 'Compact view', description: 'Use smaller spacing' },
                                    { key: 'showCompletedTasks', label: 'Show completed', description: 'Display completed todos' },
                                    { key: 'autoSave', label: 'Auto-save', description: 'Save changes automatically' },
                                ].map(({ key, label, description }) => (
                                    <label key={key} className="flex items-start gap-3 p-3 rounded-lg border border-gray-200 dark:border-gray-600 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors cursor-pointer">
                                        <input
                                            type="checkbox"
                                            checked={settings[key as keyof AppSettings] as boolean}
                                            onChange={(e) => handleSettingChange(key as keyof AppSettings, e.target.checked)}
                                            className="mt-0.5 rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                                        />
                                        <div className="min-w-0 flex-1">
                                            <div className="text-sm font-medium text-gray-900 dark:text-white">{label}</div>
                                            <div className="text-xs text-gray-500 dark:text-gray-400 leading-tight">{description}</div>
                                        </div>
                                    </label>
                                ))}
                            </div>
                        </div>
                    </div>

                    {/* Export Options */}
                    <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Export Data</h3>
                        <div className="grid grid-cols-1 sm:grid-cols-3 gap-3">
                            <Button
                                variant="outline"
                                onClick={() => handleExportData('json')}
                                icon={<Download className="w-4 h-4" />}
                                disabled={exporting}
                                className="justify-start"
                            >
                                Export JSON
                            </Button>

                            <Button
                                variant="outline"
                                onClick={() => handleExportData('txt')}
                                icon={<FileDown className="w-4 h-4" />}
                                disabled={exporting}
                                className="justify-start"
                            >
                                Export TXT Report
                            </Button>

                            <Button
                                variant="outline"
                                onClick={() => handleExportData('pdf')}
                                icon={<FileText className="w-4 h-4" />}
                                disabled={exporting}
                                className="justify-start"
                            >
                                Export PDF Report
                            </Button>
                        </div>
                    </div>

                    {/* Import Data */}
                    <div>
                        <h3 className="text-lg font-semibold mb-4 text-gray-900 dark:text-white">Import Data</h3>
                        <div className="space-y-4">
                            <label className="inline-block w-full">
                                <Button
                                    variant="outline"
                                    icon={importing ? <FileText className="w-4 h-4 animate-spin" /> : <Upload className="w-4 h-4" />}
                                    disabled={importing}
                                    className="w-full justify-start"
                                >
                                    {importing ? 'Processing...' : 'Import Data'}
                                </Button>
                                <input
                                    type="file"
                                    accept=".json,.txt,.pdf,text/plain,application/json,application/pdf"
                                    onChange={handleImportData}
                                    className="hidden"
                                    disabled={importing}
                                />
                            </label>

                            {/* Import Instructions */}
                            <div className="text-xs text-gray-500 dark:text-gray-400 bg-gray-50 dark:bg-gray-800 p-3 rounded-lg">
                                <div className="font-medium mb-2">📥 Import formats supported:</div>
                                <div className="space-y-1 ml-2">
                                    <div>• <strong>JSON:</strong> Todo app backup files or todo arrays</div>
                                    <div>• <strong>Text/TXT:</strong> Simple text lists (auto-extracts todos)</div>
                                    <div>• <strong>Others:</strong> Will attempt to extract todos from text content</div>
                                </div>
                                <div className="mt-2 font-medium">🤖 Auto-extraction features:</div>
                                <div className="ml-2 text-xs">Detects priorities (urgent, high, low), categories [category], due dates, and cleans formatting.</div>
                            </div>

                            {/* Management Actions */}
                            <div className="grid grid-cols-1 sm:grid-cols-2 gap-3 pt-2">
                                <Button
                                    variant="outline"
                                    onClick={handleResetSettings}
                                    icon={<File className="w-4 h-4" />}
                                    className="justify-start"
                                >
                                    Reset Settings
                                </Button>

                                <Button
                                    variant="danger"
                                    onClick={handleClearAllData}
                                    icon={<Trash2 className="w-4 h-4" />}
                                    className="justify-start"
                                >
                                    Clear All Data
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            {/* Fixed Actions Footer */}
            <div className="flex gap-3 pt-4 mt-4 border-t border-gray-200 dark:border-gray-600 bg-gray-50 dark:bg-gray-800 -mx-6 -mb-6 px-6 py-4 rounded-b-lg">
                <Button variant="outline" onClick={onClose} className="flex-1">
                    Cancel
                </Button>
                <Button
                    variant="primary"
                    onClick={handleSaveSettings}
                    icon={<Save className="w-4 h-4" />}
                    className="flex-1"
                    disabled={!hasChanges}
                >
                    {hasChanges ? 'Save Changes' : 'Saved'}
                </Button>
            </div>
        </Modal>
    );
}